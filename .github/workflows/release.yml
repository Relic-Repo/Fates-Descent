name: Release Creation

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository's code
      - uses: actions/checkout@v2

      # Step 2: Substitute placeholders in module.json with actual values
      - name: Substitute Manifest and Download Links
        id: sub_manifest_link_version
        uses: microsoft/variable-substitution@v1
        with:
          files: 'module.json'
        env:
          version: ${{github.event.release.tag_name}}  # Replace placeholder with the tag name of the release
          url: https://github.com/${{github.repository}}  # Replace placeholder with your repository URL
          manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json  # Replace placeholder with the URL to the latest module.json
          download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip  # Replace placeholder with the URL to the module.zip for the specific release

      # Step 3: Install npm packages
      - run: npm install

      # Step 4: Build distribution files
      - run: npm run build

      # Step 5: Create a zip file with all required files for the module
      - run: zip -r ./module.zip module.json fates-desecent.js fates-descent.js.map LICENSE.txt src/ lang/ packs/ 

      # Step 6: Create or update a release on GitHub
      - name: Update Release with Files
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true  # Set this to false if you want to prevent updating existing releases
          name: ${{ github.event.release.name }}  # Name of the release (optional)
          draft: false  # Set to true if you want to create a draft release
          prerelease: false  # Set to true if this is a prerelease
          token: ${{ secrets.GITHUB_TOKEN }}  # Token for GitHub authentication
          artifacts: './module.json, ./module.zip'  # Files to include in the release
          tag: ${{ github.event.release.tag_name }}  # Tag name for the release
          body: ${{ github.event.release.body }}  # Release notes or description (optional)
