name: Release Creation

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository's code
      - uses: actions/checkout@v2

      # Step 2: Substitute the Manifest and Download URLs in the "module.json" for a FULL RELEASE
      - name: Substitute Manifest and Download Links For Versioned Ones
        if: "!github.event.release.prerelease"
        id: sub_release_manifest_version
        uses: microsoft/variable-substitution@v1
        with:
          files: 'module.json'
        env:
          version: ${{github.event.release.tag_name}}
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip

      # Step 3: Substitute the Manifest and Download URLs in the module.json for a PRE RELEASE
      # Manifest pointing to live module.json on branch, which is updated after tag.
      - name: Substitute Manifest and Download Links For Versioned Ones
        if: "github.event.release.prerelease"
        id: sub_prerelease_manifest_version
        uses: microsoft/variable-substitution@v1
        with:
          files: 'module.json'
        env:
          version: ${{github.event.release.tag_name}}
          url: https://github.com/${{github.repository}}
          manifest: https://raw.githubusercontent.com/${{github.repository}}/next/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip

      # Step 4: Install npm packages
      - run: npm install

      # Step 5: Build distribution files
      - run: npm run build

      # Step 6: Create a zip file with all required files for the module
      - run: zip -r ./module.zip module.json fates-descent.js fates-descent.js.map LICENSE.txt src/ lang/ packs/ 

      # Step 7: Create or update a release on GitHub for a FULL RELEASE
      - name: Update Release with Files
        if: "!github.event.release.prerelease"
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true  # Set this to false if you want to prevent updating existing releases
          name: ${{ github.event.release.name }}  # Name of the release (optional)
          draft: false  # Set to true if you want to create a draft release
          prerelease: false  # Set to true if this is a prerelease
          token: ${{ secrets.GITHUB_TOKEN }}  # Token for GitHub authentication
          artifacts: './module.json, ./module.zip'  # Files to include in the release
          tag: ${{ github.event.release.tag_name }}  # Tag name for the release
          body: ${{ github.event.release.body }}  # Release notes or description (optional)

      # Step 8: Create or update a release on GitHub for a PRE RELEASE
      - name: Update Release with Files
        if: "github.event.release.prerelease"
        id: create_version_prerelease
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true  # Set this to false if you want to prevent updating existing releases
          name: ${{ github.event.release.name }}  # Name of the release (optional)
          draft: false  # Set to true if you want to create a draft release
          prerelease: true  # Set to true if this is a prerelease
          token: ${{ secrets.GITHUB_TOKEN }}  # Token for GitHub authentication
          artifacts: './module.json, ./module.zip'  # Files to include in the release
          tag: ${{ github.event.release.tag_name }}  # Tag name for the release
          body: ${{ github.event.release.body }}  # Release notes or description (optional)

      # Step 9: Update the next branch for a PRE RELEASE
      - name: Prepare repository
        if: "github.event.release.prerelease"
        run: |
          git config --global user.name '${{github.actor}}'
          git config --global user.email '${{github.actor}}@users.noreply.github.com'
          git add module.json
          git stash
          git clean -f
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY"
          git fetch origin "next"
          git switch -c "next" "origin/next"
          git checkout stash module.json
          git commit -m "${{github.event.release.tag_name}} manifest"
          git push -f
