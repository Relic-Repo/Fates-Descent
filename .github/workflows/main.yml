name: Main Workflow

on: 
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    # Install dependencies
    - name: Install dependencies
      run: npm ci

    # Dummy build steps (replace with your actual build steps)
    - name: Build Compendiums
      run: echo "Building compendiums..."
    - name: Webpack build
      run: echo "Running webpack build..."

    # Set environment variables for versioning
    - name: Set version and URLs
      id: get_version
      run: |
        echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
        echo "FOUNDRY_MANIFEST=https://github.com/${{github.repository}}/releases/latest/download/module.json" >> $GITHUB_ENV
        echo "FOUNDRY_DOWNLOAD=https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip" >> $GITHUB_ENV

    # Generate module.json
    - name: Generate module.json
      run: |
        echo '{"name": "fates-descent", "title": "Fates Descent", "description": "A module for Foundry VTT.", "version": "'"${{ env.VERSION }}"'", "manifest": "'"${{ env.FOUNDRY_MANIFEST }}"'", "download": "'"${{ env.FOUNDRY_DOWNLOAD }}"'"}' > module.json

    # Debugging step to print the contents of module.json
    - name: Print module.json
      run: cat module.json

    # Create a zip file with all files required by the module to add to the release
    - name: Create zip file
      run: zip -r ./module.zip module.json dist packs styles templates LICENSE

    # Debugging step to verify the creation of module.zip
    - name: List contents of zip file
      run: unzip -l module.zip

    # Create a release for this specific version
    - name: Update Release with Files
      id: create_version_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        name: ${{ github.event.release.name }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: './module.json, ./module.zip'
        tag: ${{ github.event.release.tag_name }}
        body: ${{ github.event.release.body }}
